/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package th.co.entronica.apollo.testametorprovider.view.content;

import java.io.File;
import javax.swing.DefaultListModel;
import th.co.entronica.apollo.testametorprovider.controller.ExecuteScriptController;
import th.co.entronica.apollo.testametorprovider.controller.MainController;
import th.co.entronica.apollo.testametorprovider.controller.MasterController;

/**
 *
 * @author Pop
 */
public class ExecuteScriptPanel extends javax.swing.JPanel {

   /**
    * Creates new form ExecuteScriptPanel
    */
   private DefaultListModel model;
   private String textArea;
   private String pathProject;
   private File fileEdit;
   private ExecuteScriptController esc;
   
   
   public ExecuteScriptPanel(String pathPro) {
   }

   public ExecuteScriptPanel(ExecuteScriptController executeScriptController) {
        esc = executeScriptController;
        initComponents();
        
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      executeList = new javax.swing.JList();
      btnExecute = new javax.swing.JButton();
      jTabbedPane1 = new javax.swing.JTabbedPane();
      jScrollPane2 = new javax.swing.JScrollPane();
      jTextArea1 = new javax.swing.JTextArea();
      jScrollPane3 = new javax.swing.JScrollPane();
      jTextArea2 = new javax.swing.JTextArea();

      setPreferredSize(new java.awt.Dimension(500, 450));

      executeList.setModel(new javax.swing.AbstractListModel() {
         String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
         public int getSize() { return strings.length; }
         public Object getElementAt(int i) { return strings[i]; }
      });
      jScrollPane1.setViewportView(executeList);

      btnExecute.setText("Execute");

      jTextArea1.setColumns(20);
      jTextArea1.setRows(5);
      jScrollPane2.setViewportView(jTextArea1);

      jTabbedPane1.addTab("tab1", jScrollPane2);

      jTextArea2.setColumns(20);
      jTextArea2.setRows(5);
      jScrollPane3.setViewportView(jTextArea2);

      jTabbedPane1.addTab("tab2", jScrollPane3);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(btnExecute)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jTabbedPane1)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(btnExecute)
                  .addGap(0, 1, Short.MAX_VALUE)))
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnExecute;
   private javax.swing.JList executeList;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JScrollPane jScrollPane3;
   private javax.swing.JTabbedPane jTabbedPane1;
   private javax.swing.JTextArea jTextArea1;
   private javax.swing.JTextArea jTextArea2;
   // End of variables declaration//GEN-END:variables

private void addListExecute(String pathPro) {
      pathProject = pathPro;

      try {
         model = new DefaultListModel();
         File filePath = new File(pathPro + "/TestScript/");
         File[] fileList = filePath.listFiles();
         model.removeAllElements();
         executeList.setModel(model);
         for (File file : fileList) {
            if (file.isFile()) {
               String fileName = file.getName();
               model.addElement(fileName);
               executeList.setModel(model);
            }
         }
      } catch (Exception e) {
         e.printStackTrace();
      }


   }

   public void initValue() {
      MainController mainController = MasterController.getInstance().getMainController();
      addListExecute(mainController.getProjectPath() + "/" + mainController.getProjectName());
   }

}
